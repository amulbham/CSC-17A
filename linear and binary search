/* 
 * File:   main.cpp
 * Author: Amul Bham
 * Created on September 13, 2015, 7:23 PM
 * Purpose: To demonstrate the difference in speed
 * and efficiency of a linear search in contrast to
 * a binary search
 */
 
using namespace std;

//System Libraries
#include <iostream> //Input/Output stream Library
#include <algorithm> //used for the shuffle function 

//User Libraries

//Global Constants

//Function Prototypes
void linearSearch(int[],const int,int,int);
void binarySearch(int[],const int,int,int);


//Execution begins here
int main(int argc, char **argv)
{
    //Declare Variables
    const int TWEN = 20; //# of values to be stored in array
    int randm[TWEN];          //array of twenty values to be sorted
    int num;                  //number to be found with the sort
    int count;          //counter to determine how many attempts it took
    
    //Initialize the array with random numbers
    cout<<"Enter a number between 1 and 20"<<endl;
    cin>>num;
    
       
    for (int i = 0;i<TWEN;i++)
	{
		randm[i] = i+1 ;
	}
    random_shuffle(&randm[0],&randm[19]);
    
    //Call Linear search function
    linearSearch(randm,TWEN,count,num);
    
    //Call the binary search function
    binarySearch(randm,TWEN,count,num);
    
    //Exit the stage right!
	return 0;
}

void linearSearch(int randm[],const int TWEN,int count,int num){
    //Linear search, search 1 at a time
    for (int j = 0; j<TWEN;j++){
        if (randm[j]==num){
            count++;
            cout<<"Your number was found at position "<<j+1<<endl;
            break;
            }
        else{
            count++;
            }
        }
    
    //Output results of linear search
    cout<<endl<<"The Linear Search took "<<count<<" times"<<endl;
    
    }
    
    
void binarySearch(int randm[],const int TWEN,int count,int num){
    //First you must sort the values in accesending order 
    int temp; //used to temp store the higher value in the array
    
    for(int i = 0; i < TWEN; i++)
{
      for(int j = 1; j < TWEN-1; j++) //use two loops, one that represents the current value, and
      //one that represents the value being compared too 
      {
               if(randm[j] < randm[i])
               {
                    //swap them if it is greater
                   temp = randm[i];
                   randm[i] = randm[j];
                   randm[j] = temp;
                }
       }
}
    //Binary search, search by cutting down in half
    
    int first = 0;        //First value of array
    int last = TWEN - 1; //last value of array
    bool found = false; //used to break loop once value is found
    int middle;    //middle value of array
    float position; //position where the variable was found
    
    while(!found && first<= last){
        middle = (first + last)/2.0;
        if(randm[middle]==num){ //determine if it is the middle value
            found = true; 
            count++;    
        }else if(randm[middle]> num){ //if the middle is greater, set the last value = the middle
            last = middle -1;
            count++; //counter to keep track of how many attempts it takes
        }else{ //if the number is greater than the middle, set the first = to the middle
            first = middle +1;
            count++; 
            }
}
            position = middle;
    //Output the result of the binary search
   cout<<"Your number was found at position "<<position<<endl;
   cout<<"It took the binary search "<<count<<" tries"<<endl;
}
